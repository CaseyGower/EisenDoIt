<row>
            <div class="col-2-md box"></div>
            <div class="col-5-md box">
                <p> urgent </p>
            </div>

            <div class="col-5-md box">
                <p> Not Urgent </p>
            </div>
        </row>

        <row>
            <div class="col-md-2 box">
                <p> Important </p>
            </div>
            <div class="col-md-5 box">
                <p> Box 1 </p>
            </div>

            <div class="col-md-5 box">
                <p> Box 2 </p>
            </div>
        </row>
        <row>
            <div class="col-md-2 box">
                <p> Not Important </p>
            </div>
            <div class="col-md-5 box">
                <p> Box 3 </p>
            </div>

            <div class="col-md-5 box">
                <p> Box 4 </p>
            </div>
        </row>
        
        
         // when button is clicked...
    $("#submitButton").click(function (event) {
        // get new comment text from input box
        var inputText = $("#newToDo").val();

        var newToDo = $("<li>");
        newToDo.text(inputText);


        $("#box1").append(newToDo);

        $("#newToDo").val("");


    });
    
    
    <div class="form-group">
                    <label for="newToDo">New To Do </label>
                    <input type="text" class="form-control" id="newToDo">

                    <button class="btn btn-default" id="submitButton">Add To Do</button>
                </div>
                
                
                 // Problem: User interaction doesn't provide desired results.
    // Solution: Add interactivity so the user can manage daily tasks

    var taskInput = document.getElementById("new-task");
    var addButton1 = document.getElementsByTagName("button")[0];
    var addButton2 = document.getElementsByTagName("button")[1];
    var addButton3 = document.getElementsByTagName("button")[2];
    var addButton4 = document.getElementsByTagName("button")[3];



    var incompleteTasksHolder = document.getElementById("incomplete-tasks");
    var completedTasksHolder = document.getElementById("completed-tasks");

    //New Task List Item
    var createNewTaskElement = function (taskString) {
        //Create List Item
        var listItem = document.createElement("li");

        //input (checkbox)
        var checkBox = document.createElement("input"); // checkbox
        //label
        var label = document.createElement("label");
        //input (text)
        var editInput = document.createElement("input"); // text
        //button.edit
        var editButton = document.createElement("button");
        //button.delete
        var deleteButton = document.createElement("button");

        //Each element needs modifying

        checkBox.type = "checkbox";
        editInput.type = "text";

        editButton.innerText = "Edit";
        editButton.className = "edit";
        deleteButton.innerText = "Delete";
        deleteButton.className = "delete";

        label.innerText = taskString;


        // each element needs appending
        listItem.appendChild(checkBox);
        listItem.appendChild(label);
        listItem.appendChild(editInput);
        listItem.appendChild(editButton);
        listItem.appendChild(deleteButton);

        return listItem;
    }

    // Add a new task
    var addTask = function () {
        console.log("Add task...");
        //Create a new list item with the text from #new-task:
        var listItem = createNewTaskElement(taskInput.value);
        //Append listItem to incompleteTasksHolder
        incompleteTasksHolder.appendChild(listItem);
        bindTaskEvents(listItem, taskCompleted);

        taskInput.value = "";
    }

    // Edit an existing task
    var editTask = function () {
        console.log("Edit Task...");

        var listItem = this.parentNode;

        var editInput = listItem.querySelector("input[type=text]")
        var label = listItem.querySelector("label");

        var containsClass = listItem.classList.contains("editMode");
        //if the class of the parent is .editMode 
        if (containsClass) {
            //switch from .editMode 
            //Make label text become the input's value
            label.innerText = editInput.value;
        } else {
            //Switch to .editMode
            //input value becomes the label's text
            editInput.value = label.innerText;
        }

        // Toggle .editMode on the parent
        listItem.classList.toggle("editMode");

    }


    // Delete an existing task
    var deleteTask = function () {
        console.log("Delete task...");
        var listItem = this.parentNode;
        var ul = listItem.parentNode;

        //Remove the parent list item from the ul
        ul.removeChild(listItem);
    }

    // Mark a task as complete 
    var taskCompleted = function () {
        console.log("Task complete...");
        //Append the task list item to the #completed-tasks
        var listItem = this.parentNode;
        completedTasksHolder.appendChild(listItem);
        bindTaskEvents(listItem, taskIncomplete);
    }

    // Mark a task as incomplete
    var taskIncomplete = function () {
        console.log("Task Incomplete...");
        // When checkbox is unchecked
        // Append the task list item #incomplete-tasks
        var listItem = this.parentNode;
        incompleteTasksHolder.appendChild(listItem);
        bindTaskEvents(listItem, taskCompleted);
    }

    var bindTaskEvents = function (taskListItem, checkBoxEventHandler) {
        console.log("Bind list item events");
        //select taskListItem's children
        var checkBox = taskListItem.querySelector("input[type=checkbox]");
        var editButton = taskListItem.querySelector("button.edit");
        var deleteButton = taskListItem.querySelector("button.delete");

        //bind editTask to edit button
        editButton.onclick = editTask;

        //bind deleteTask to delete button
        deleteButton.onclick = deleteTask;

        //bind checkBoxEventHandler to checkbox
        checkBox.onchange = checkBoxEventHandler;
    }

    var ajaxRequest = function () {
        console.log("AJAX Request");
    }

    // Set the click handler to the addTask function
    //addButton.onclick = addTask;
    addButton.addEventListener("click", addTask);
    addButton.addEventListener("click", ajaxRequest);


    // Cycle over the incompleteTaskHolder ul list items
    for (var i = 0; i < incompleteTasksHolder.children.length; i++) {
        // bind events to list item's children (taskCompleted)
        bindTaskEvents(incompleteTasksHolder.children[i], taskCompleted);
    }
    // Cycle over the completeTaskHolder ul list items
    for (var i = 0; i < completedTasksHolder.children.length; i++) {
        // bind events to list item's children (taskIncompleted)
        bindTaskEvents(completedTasksHolder.children[i], taskIncomplete);

    }
    
    button {
    background: none;
    border: 0px;
    color: #000;
    font-size: 15px;
    width: 60px;
    font-family: Lato, sans-serif;
    cursor: pointer;
}
button:hover {
    color: #333;
}

/* Heading */

input[type="text"] {
    margin: 0;
    font-size: 18px;
    line-height: 18px;
    height: 18px;
    padding: 10px;
    border: 1px solid #ddd;
    background: #fff;
    border-radius: 6px;
    font-family: Lato, sans-serif;
    color: #888;
}
input[type="text"]:focus {
    color: #333;
}

/* New Task */

label[for='new-task'] {
    display: block;
    margin: 0 0 20px;
}
input#new-task {
    float: left;
    width: 70rem;
    margin-left: 13rem;
    box-shadow: 3px 7px 20px lightgray;
}
p > button:hover {
    color: #0FC57C;
}
.addButton1 {
    border: 1px red solid;
    border-radius: 5px;
    background-color: lightcoral;
    color: white;
    margin: 0;
}
.addButton2,
.addButton3 {
    border: 2px yellow solid;
    border-radius: 5px;
    background-color: lightgoldenrodyellow;
}
.addButton4 {
    border: 1px green solid;
    border-radius: 5px;
    background-color: lightgreen;
}

/* Task list */

li {
    overflow: hidden;
    padding: 20px 0;
    border-bottom: 1px solid #eee;
}
li > input[type="checkbox"] {
    margin: 0 10px;
    position: relative;
    top: 15px;
}
li > label {
    font-size: 18px;
    line-height: 40px;
    width: 237px;
    padding: 0 0 0 11px;
}
li > input[type="text"] {
    width: 226px;
}
li > .delete:hover {
    color: #CF2323;
}

/* Completed */

#completed-tasks label {
    text-decoration: line-through;
    color: #888;
}

/* Edit Task */

ul li input[type=text] {
    display: none;
}
ul li.editMode input[type=text] {
    display: block;
}
ul li.editMode label {
    display: none;
}
ul {
    margin: 0;
    padding: 0;
}
li * {
    float: left;
}
li,
h3 {
    clear: both;
    list-style: none;
}
input,
button {
    outline: none;
}
